canvas.addEventListner("mousemove", onMouseMove)
-> 캔버스에 마우스가 올라갔을때 onMouseMove 함수로 들어가게되고
함수 안에는 정의한 const x,y가 캔버스 안의 좌표를 나타내주고 있다.

캔버스를 클릭했을때 painting을 시작해야 한다.
mousedown은 클릭했을때 일어나는 이벤트.

마우스를 움직이면 좌표를 얻게되고 
클릭하면 painting이 된다음. 마우스를 놓으면 다시 false로 설정.

마우스로 그림을 그리다 손에서 땠을때 stopPainting이 되어야하고

또 캔버스에서 마우스가 벗어 났을때 (mouseleave) 일때. stopPainting이 되어야함.

그경우는 onMouseUp, mouseleave 일때이다.

초기상태는 false이므로 바깥에 let painting = false;로 초기화한다.

----------------------------------------------------------------
canvas 태그에 대하여.

HTML의 한 요소인데 다른점은 Context를 갖는다는 것. 

Context라는것은 요소안에서 우리가 픽셀에 접근할 수 있는 방법이다.

간단하게 context를 만들 수 있다. 

context 변수를 만든다. 예를 들어
-> 
const canvas = document.getElementById('my-house');
const ctx = canvas.getContext('2d);

ctx.strokeStyle = "#2c2c2c"; (선의 색상)
ctx.lineWidth = 2.5; (선의 굵기)

2D 뿐만 아니라 많은 context가 있다.

canvas.width 와 canvas.height로 canvas의 크기를 나타내주어야 한다 꼭

let painting = false로 초기화. 마우스가 클릭될때 true로 바꾸는 함수 실행

function stopPainting(), function startPainting() 두가지로 painting = true, false설정

if(canvas) 만약 canvas가 있을때. 아래 4가지 이벤트를 실행

canvas.addEventListener(~~

mousemove - canvas위에 마우스가 올라가있을때.
mousedown - 마우스를 눌렀을때
mouseup - 마우스를 눌렀다 땠을때
mouseleave - canvas에서 마우스가 벗어났을때
--------------------------------------------------------------------------------------------

painting은 let변수로 선언되어있고 값은 false로 초기화 되어있다.

canvas에 마우스가 올라가면 mousemove이벤트가 일어나고 onMouseMove함수로 이동.

onMouseMove에서는 const x,y를 선언해 canvas내부의 x, y 좌표인 event.offsetX,Y를 저장

다음 if 문 실행, if(!painting) ... painting이 false일경우, 
ctx.beginPath();
ctx.moveTo(x,y) 문장을 실행한다.

beginPath()는 경로를 그리기위한 첫번째 단계이고
moveTo(x,y)는 좌표 x,y로 펜을 이동하는 것이다.

1. 클릭하지 않고 캔버스위에 마우스를 이동시키는 경우 beginPath()를 시작하는 거다.
-> 마우스를 canvas에 올리면 onMouseMove함수가 실행되고 x,y 좌표를 담는다
그리고 if문으로 들어간다 현재 상태는 false이기 때문에 beginPath()를 시작.

path는 선이다.

path를 만들면 마우스이 x,y 좌표로 path를 옮기는 것이다.

(클릭하지않고 마우스를 canvas위에 움직일때 path가 만들어지고 있는것이다.)

path의 시작점은 내 마우스가 있는 곳이다. 마우스를 움직이는 동안 많은 path들이

만들어졌는데, 어떤 path들도 사용되어지지는 않았다.

---------------------------------------------

내가 클릭을 하면 mousedown 이벤트가 발생하고 statrPainting함수가 호출되어

painting = true상태로 변경된다.

클릭을하고도 내가 마우스를 움직이고 있다는것은 계속 onMouseMove함수가 실행되고 있는것이고

painting이 true일때의 조건식인 else 부문으로 넘어가
lineTo(x,y)를한다. 현재 드로잉위치에서 x,y로 지정된 위치까지 선을 그림.

lineTo를 간단한게 설명하지면 path의 이 전 위치에서 지금 위치까지 선을 만드는 것이다.
그리고 Stroke를 이용해 앞서 지정해둔 cavnas.StrokeStyle = "#2c2c2c" 인
style의 색상으로 선을 그린다.

/** 정리 ** /

마우스는 항상 움직이고 있다 onMouseMove함수.
하지만 지금은 painting = false이다. 왜냐, 클릭하고 있지 않으니까.
그냥 path(선)만 만들고 있는 것이다. 동시에 패스를 움직이고 있는것이다
마우스가 가는 곳으로 path를 움직인다. (moveTo는 펜을 지정된 좌표로 옮기는함수)

여기 코드에서 lineTo와 stroke는 내가 마우스를 움직이는 내내 발생하는 것이다.
-> painting이 true일때, 즉 마우스를 누르고 있을 경우를 말한다.

onMouseMove는 끝나는 함수 개념이아닌 내가 마우스를 움직이는 내내 발생하는 함수.

false일때 path를 만들고있지만 (begin과 moveTo), 사용하진않는다

여기서 마우스를 클릭하면 true가 되고 lineTo에의해 현재 위치에서 지정된 위치까지 선을그리고 이게 이어져서 우리눈에 그림판처럼 보이는것.

------------------------------------
< 색깔 지정 >

상자들의 클래스인 jsColor을 getElementsByClassName("jsColor")으로 가져와
const colors = doucument~~~ 로 colors를 변수선언해 내용을 담는다.

getElement로 class를 가져올때 동일한 class가 여러개일경우 HTMLcollection 형태로나오고

이를 배열로 만들기위해선 Array.from(colors)로 묶어주면 길이가9인 array형태로나온다.

 그리고 foreach는 array의 인자값 만큼 ( 여기선 9개니 9 ) callBackFunction이 반복된다.

function의 매개변수명은 아무거나해도 된다 여기선 color로 지정. 

foreach 함수안에 명령어로 console.log(color)을 호출해보면 

브라우저에서 9개의 div가 순서대로 나타난다 

이것에 대해 클릭했을때 색상이 바뀌도록 설정해야 하니 함수안에

color.addEventListener("click" handleColorClick); 명렁.

원하는 색상의 div를 눌렀을때 handleColorClick로 이동할 것이고.
-> const color로 변수선언을한다 담기는 값은 event가 발생한 타겟의 backgroundColor을 담아야한다.

경로는 event.target.style.backgroundColor에담겨있고 스타일의 배경색깔 값이 color에 담긴다.

밖에서 설정해둔 ctx.strokeStyle=color, ctx.fillStyle=color로 오버라이딩 해준다 (덮어준다)

strokeStyle은 초기 선의 색상이고, fillStyle은 화면을 채우기위해 만들어진 사각형의 색상을 뜻한다.

여기까지가 색상변경이다

-----------------------------------------------------------------------

< input type="range", 브러쉬 굵기 조절 >

if(range){
~~} 의 range if 문을만든다.

range가 true일 때, 즉 range가 존재할때 if문이 실행된다

여기서 range는 밖에서 const range = document.getElementById("jsRange"); 로 input을 가져왔다.

if문이 실행되면 range.addEventListener("input", handleRangeChange);  다음과같은 코드가 실행되고

range로 바를 조절했을때 handleRangeChagne함수로 넘어간다. 함수로 넘어가기전에 한가지 인지하고 넘어가자.

/*index.html의 html코드이다*/
<input
          type="range"
          id="jsRange"
          min="0.1"
          max="5.0"
          value="2.5"
          step="0.1"
 />

=> input의 type은 range. (바로 좌우로 조절할 수 있는.), id는 jsRange, 여기서 min,max는 바조절의 최소, 최대로 갈수있는 수치이고 

step은 min과 max 사이에서 움직일때 0.1씩 움직인다는 뜻. value는 초기값이라고 생각하면된다. range를 생성했을때 2.5의 값을 가지고 생성된다.

다시 handleRangeChange함수로 넘어와서 "input"의 이벤트로 바가 움직였기때문에. 펜의 굵기를 바꿔야한다.

선의 굵기는 ctx.lineWidth이고 밖에서 초기값은 ctx.lineWidth 2.5로 초기화 되어있다. 이값을 오버라이딩으로 바꾸면 선의 굵기가 바뀐다.

함수내에 변수를하나 선언한다. -> const value = event.target.value; 조절바의 위치. 즉 range의 value값을 선언한 value에 넣는다.

다음 ctx.lineWidth = value로 오버라이딩해서 선의 굵기를 바꿔준다 

----------------------------------------------------------------------------------------------------------------------

< FILL, PAINT 선그리기, 채우기 mode >

range와 마찬가지로 if(mode) {~~ 로 mode가 true일때

mode는 const mode = document.getElementById("jsMode"); 이다

save옆의 버튼이고 한버튼에서 FILL, PAINT를 처리해야한다.

버튼을 클릭했을때 handleModeClick 함수로 넘어감. (range와 동일)

handleModeClick에서 filling이 true, false일때 조건으로 식을 써가야한다.

여기서 filling이란 앞에서 painting = false, true설정 처럼 선을 그리는게아닌

채우는 경우에 true, false로 계속 바껴야되기 때문에 밖에서 let filling = false로 초기 선언해둔다.




<FILL, PAINT 버튼>

FILL
-> FILL은 그리기 PAINT는 채우기, 색상클릭후 canvas클릭.
일단 js파일에 버튼을 가져옴 
const mode = document.getElementById("jsMode"); 

if(mode) 로 {~} 시작.

mode가 true일때 조건문돌림. 존재하니까 true

mode.addEventListener("click", handleModeClick);

버튼클릭했을때 handleModeClick 함수로 이동 이함수는 버튼을 클릭했을떄

FILL, PAINT로 바뀌는 함수이다.

filling는 현재 false.이고 else문을 실행한다.
filling을 true로 바꾸고 버튼에 innerText = "Paint";로 Paint로 바꾼다.
채우기 모드로 바꾸는것이다.

다시 그리기 모드로 가고싶으면 또 버튼을누른다. 이때는 filling이 true이고
innerText = "Fill"로 다시 버튼의 텍스트가 Fill이 된다.

이제 PAINT일 경우 색상을 선택하고 canvas를 눌렀을때 색이 채워져야한다.

if(canvas){ ~~로 돌아와서 canvas를 눌렀을때 색이 채워지는 이벤트작성.

canvas.addEventListener("click", handleCanvasClicK);

캔버스를 눌렀을때 handleCanvasClick 함수로이동.

if(filling) { ~ }로 조건문을 돌릴 것이고. PAINT상태일때 즉 filling이 true.

만약 filling가 false이면 아무일도 일어나지 않는다.

fillRect 함수란 사각형을 만드는것이다. (arg1, arg2, arg3, arg4)가 있는데

arg1,2는 좌표인데 좌측 상단 0,0을 기준의 위치이다.

arg3,4는 width, height이다. 여기서 canvas의 크기를 700x700 로 정해줬기때문에

똑같이 덮기위해 arg3, 4는 700x700으로한다. 700이란 변수를 많이 쓰기때문에. 

밖에서 const CANVAS_SIZE = 700; 으로 선언해버린다.

이렇게하여 filling가 true일때만 색이채워지는 함수 완성

-------------------------------------

< SAVE >